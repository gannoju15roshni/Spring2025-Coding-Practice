Data Structures
- *Lists*
1.1 - list.append(x)
    Add an item to end of the list

1.2 - list.extend(iterable)
    Extend the list by appending all the items from iterable
    
1.3 - list.insert(i,x)
    Insert an item at given position
    -First argument is index of element before which to insert (if 'i' is 0, then insert at the front of list)
    -For 'x' it is similar to list.append(x) (it adds an item to the list)

1.4 - list.remove(x)
    Remove first item from list whose value is equal to x (raises ValueError if no such item found)

1.5 - list.pop([i])
    Remove item at given position in list and return it
     -> if no index specified (i.e, "i" it removes and returns last item in the list)
     -> Raises an IndexError if list is empty or index is outside the list range
    
1.6 - list.clear()
    Removes all the items from the Lists

1.7 - list.index(x[,start[,end]])
    Returns index of the first item whose value is "x"
     -> ex: list.index(3,1,6) 
     *although start and end arguments are optional they're useful to slice the list to limit the particular subsequence of the list

1.8 - list.count(x)
    Returns number of times 'x' appears in the list

1.9 - list.sort()
    Sorts the items of the list
     -> list.sort(*,key= None,reverse= False) [the arguments can be used for custom sorting]

1.10 - list.reverse()
        Reverse the elements of the list 

1.11 - list.copy()
        Return a shallow copy of the list


- *Using Lists as Stacks*
    -last element added is the first element retrieved (“last-in, first-out”)
    -To add an item to the top of the stack, use append()
    -To retrieve an item from the top of the stack, use pop()
        example:
        stack = [3, 4, 5]
        stack.append(6)
        stack.append(7)
        stack
        [3, 4, 5, 6, 7]
        stack.pop()
        7
        stack
        [3, 4, 5, 6]
        stack.pop()
        6
        stack.pop()
        5
        stack
        [3, 4]


- *Using Lists as Queues*
    -first element added is the first element retrieved (“first-in, first-out”); however, lists are not efficient for this purpose
    -While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).
    -To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends. 
        example:
        from collections import deque
        queue = deque(["Eric", "John", "Michael"])
        queue.append("Terry")                       # Terry arrives
        queue.append("Graham")                      # Graham arrives
        queue.popleft()                             # The first to arrive now leaves
        'Eric'
        queue.popleft()                             # The second to arrive now leaves
        'John'
        queue                                       # Remaining queue in order of arrival
        deque(['Michael', 'Terry', 'Graham'])
    

- *List Comprehensions*
    - Provides a concise way to create lists (where each element is result of some operations applied to each member of another sequence or iterable)
        example:
        squares = []
        for x in range(10):
            squares.append(x**2)

        squares
        [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        note: the above code still runs even after loop ends to neglect any side effects we can use 
        squares = [x**2 for x in range(10)]


